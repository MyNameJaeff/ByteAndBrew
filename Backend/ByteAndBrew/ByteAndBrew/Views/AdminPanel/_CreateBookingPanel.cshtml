@{
    /* 
     * File: _CreateBookingPanel.cshtml
     */
}
@model ByteAndBrew.Dtos.Booking.BookingAndCustomerCreateDto

<form action="/AdminPanel/CreateBooking" method="post"
      class="bg-blue-50 p-6 rounded-xl shadow-md"
      data-type="Booking">
    @Html.AntiForgeryToken()
    <h3 class="text-lg font-semibold text-gray-800 mb-4">
        <i class="fas fa-calendar-plus mr-2 text-blue-600"></i>Create New Booking
    </h3>

    <!-- Error Display -->
    <div id="form-errors" class="hidden mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
        <div class="flex items-start">
            <i class="fas fa-exclamation-circle text-red-500 mr-2 mt-1"></i>
            <div>
                <p class="font-medium text-red-800 mb-1">Please correct the following errors:</p>
                <ul class="text-red-600 text-sm list-disc list-inside space-y-1"></ul>
            </div>
        </div>
    </div>

    <!-- Success Display -->
    <div id="form-success" class="hidden mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
        <div class="flex items-center">
            <i class="fas fa-check-circle text-green-500 mr-2"></i>
            <p class="text-green-800 font-medium"></p>
        </div>
    </div>

    <!-- Customer Info -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div>
            <label asp-for="Name" class="block text-gray-700 font-medium mb-2">
                Customer Name *
            </label>
            <input asp-for="Name"
                   type="text"
                   id="Name"
                   class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                   placeholder="Enter customer name"
                   required />
            <span asp-validation-for="Name" class="text-red-500 text-sm"></span>
        </div>
        <div>
            <label asp-for="PhoneNumber" class="block text-gray-700 font-medium mb-2">
                Phone Number *
            </label>
            <input asp-for="PhoneNumber"
                   type="tel"
                   id="PhoneNumber"
                   class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                   placeholder="Enter phone number"
                   required />
            <span asp-validation-for="PhoneNumber" class="text-red-500 text-sm"></span>
        </div>
    </div>

    <!-- Booking Info -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
            <label asp-for="TableId" class="block text-gray-700 font-medium mb-2">
                Select Table *
            </label>
            <select asp-for="TableId"
                    class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    id="tableSelect"
                    required>
                <option value="">-- Select Table --</option>
                @if (ViewBag.Tables != null)
                {
                    @foreach (var table in (IEnumerable<SelectListItem>)ViewBag.Tables)
                    {
                        <option value="@table.Value" selected="@table.Selected">@table.Text</option>
                    }
                }
            </select>
            <span asp-validation-for="TableId" class="text-red-500 text-sm"></span>
        </div>
        <div>
            <label asp-for="NumberOfGuests" class="block text-gray-700 font-medium mb-2">
                Number of Guests *
            </label>
            <input asp-for="NumberOfGuests"
                   type="number"
                   min="1"
                   max="12"
                   id="NumberOfGuests"
                   class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                   placeholder="1"
                   value="1"
                   required />
            <span asp-validation-for="NumberOfGuests" class="text-red-500 text-sm"></span>
        </div>
    </div>

    <!-- Date Selection -->
    <div class="mb-4">
        <label class="block text-gray-700 font-medium mb-2">
            Select Date *
        </label>
        <input type="date"
               id="bookingDate"
               class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
               required />
        <p class="text-sm text-gray-600 mt-1">
            <i class="fas fa-info-circle mr-1"></i>
            You can book up to 90 days in advance
        </p>
    </div>

    <!-- Time Slot Selection -->
    <div class="mb-6" id="timeSlotContainer">
        <p class="text-gray-500 text-center py-4 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
            <i class="fas fa-clock mr-2"></i>
            Please select a table and date to view available time slots.
        </p>
    </div>

    <!-- Hidden input for StartTime -->
    <input asp-for="StartTime" type="hidden" id="hiddenBookingDateTime" />

    <!-- Debug info (remove in production) -->
    <div id="debug-info" class="hidden mb-4 p-3 bg-gray-100 rounded text-xs text-gray-600">
        <strong>Debug Info:</strong>
        <div>Selected DateTime: <span id="debug-datetime">None</span></div>
        <div>Table ID: <span id="debug-table">None</span></div>
        <div>Guests: <span id="debug-guests">None</span></div>
    </div>

    <!-- Action Buttons -->
    <div class="flex gap-2">
        <button type="submit"
                class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-lg font-medium transition-colors duration-200 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center">
            <i class="fas fa-save mr-2"></i>
            <span>Create Booking</span>
            <i class="fas fa-spinner fa-spin ml-2 hidden" id="submit-spinner"></i>
        </button>
        <button type="button"
                onclick="closeQuickForm(this)"
                class="px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200">
            Cancel
        </button>
    </div>
</form>

<script>
    // Add real-time debugging and validation
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form[action="/AdminPanel/CreateBooking"]');
        if (!form) return;

        // Debug toggle (remove in production)
        const debugInfo = document.getElementById('debug-info');
        const debugToggle = document.createElement('button');
        debugToggle.type = 'button';
        debugToggle.className = 'text-xs text-gray-500 underline mb-2';
        debugToggle.textContent = 'Show Debug Info';
        debugToggle.onclick = () => {
            debugInfo.classList.toggle('hidden');
            debugToggle.textContent = debugInfo.classList.contains('hidden') ? 'Show Debug Info' : 'Hide Debug Info';
        };
        form.insertBefore(debugToggle, form.firstChild);

        // Real-time form validation feedback
        const inputs = form.querySelectorAll('input[required], select[required]');
        inputs.forEach(input => {
            input.addEventListener('blur', function() {
                validateField(this);
            });

            input.addEventListener('input', function() {
                // Clear previous error styling
                this.classList.remove('border-red-500');
                const errorSpan = this.parentNode.querySelector('.text-red-500');
                if (errorSpan) errorSpan.textContent = '';

                // Update debug info
                updateDebugInfo();
            });
        });

        // Update debug info when values change
        function updateDebugInfo() {
            const datetime = document.getElementById('hiddenBookingDateTime').value;
            const table = document.getElementById('tableSelect').value;
            const guests = document.querySelector('[name="NumberOfGuests"]').value;

            document.getElementById('debug-datetime').textContent = datetime || 'None';
            document.getElementById('debug-table').textContent = table || 'None';
            document.getElementById('debug-guests').textContent = guests || 'None';
        }

        // Field validation
        function validateField(field) {
            let isValid = true;
            let errorMessage = '';

            if (field.hasAttribute('required') && !field.value.trim()) {
                isValid = false;
                errorMessage = 'This field is required';
            } else if (field.type === 'tel' && field.value) {
                // Basic phone validation
                const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
                if (!phoneRegex.test(field.value.replace(/[\s\-\(\)]/g, ''))) {
                    isValid = false;
                    errorMessage = 'Please enter a valid phone number';
                }
            } else if (field.type === 'number') {
                const value = parseInt(field.value);
                const min = parseInt(field.min);
                const max = parseInt(field.max);
                if (value < min || value > max) {
                    isValid = false;
                    errorMessage = `Value must be between ${min} and ${max}`;
                }
            }

            // Apply visual feedback
            if (!isValid) {
                field.classList.add('border-red-500');
                const errorSpan = field.parentNode.querySelector('.text-red-500');
                if (errorSpan) errorSpan.textContent = errorMessage;
            } else {
                field.classList.remove('border-red-500');
                field.classList.add('border-green-500');
                setTimeout(() => field.classList.remove('border-green-500'), 2000);
                const errorSpan = field.parentNode.querySelector('.text-red-500');
                if (errorSpan) errorSpan.textContent = '';
            }

            return isValid;
        }

        // Submit button state management
        const submitBtn = form.querySelector('button[type="submit"]');
        const spinner = document.getElementById('submit-spinner');

        form.addEventListener('submit', function() {
            submitBtn.disabled = true;
            spinner.classList.remove('hidden');
            setTimeout(() => {
                submitBtn.disabled = false;
                spinner.classList.add('hidden');
            }, 5000); // Re-enable after 5 seconds as fallback
        });
    });
</script>