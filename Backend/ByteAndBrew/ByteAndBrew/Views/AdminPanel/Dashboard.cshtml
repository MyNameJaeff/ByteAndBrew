@using Microsoft.AspNetCore.Http
@{
    Layout = "_Layout";
    ViewData["Title"] = "Admin Dashboard";
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-4xl font-bold text-gray-900">Admin Dashboard</h1>
            <p class="text-gray-600 mt-2">Restaurant Management System</p>
        </div>
        <div class="flex items-center space-x-4">
            <span class="text-gray-700 font-medium">Welcome, @Context.Session.GetString("AdminUsername")</span>
            <form method="post" action="/AdminPanel/Logout">
                @Html.AntiForgeryToken()
                <button type="submit" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg">
                    <i class="fas fa-sign-out-alt mr-2"></i>Logout
                </button>
            </form>
        </div>
    </div>

    <div id="notification-container" class="fixed top-4 right-4 flex flex-col gap-2 z-[9999]"></div>

    <!-- Management Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
        <!-- Bookings Card -->
        <div class="relative bg-white rounded-2xl shadow-xl hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-300 border border-gray-200">
            <div class="p-8 text-center">
                <div class="bg-blue-100 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6">
                    <i class="fas fa-calendar-check text-3xl text-blue-600"></i>
                </div>
                <h3 class="text-2xl font-bold text-gray-900 mb-4">Manage Bookings</h3>
                <p class="text-gray-600 mb-6 leading-relaxed">View, create, edit and delete customer bookings.</p>
                <button onclick="loadPanel('Bookings')" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-4 rounded-xl font-medium shadow-lg">
                    Manage Bookings
                </button>
            </div>
        </div>

        <!-- Menu Card -->
        <div class="relative bg-white rounded-2xl shadow-xl hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-300 border border-gray-200">
            <div class="p-8 text-center">
                <div class="bg-green-100 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6">
                    <i class="fas fa-utensils text-3xl text-green-600"></i>
                </div>
                <h3 class="text-2xl font-bold text-gray-900 mb-4">Manage Menu</h3>
                <p class="text-gray-600 mb-6 leading-relaxed">Add, update and remove items from the restaurant menu.</p>
                <button onclick="loadPanel('MenuItems')" class="bg-green-600 hover:bg-green-700 text-white px-6 py-4 rounded-xl font-medium shadow-lg">
                    Manage Menu
                </button>
            </div>
        </div>

        <!-- Tables Card -->
        <div class="relative bg-white rounded-2xl shadow-xl hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-300 border border-gray-200">
            <div class="p-8 text-center">
                <div class="bg-yellow-100 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6">
                    <i class="fas fa-chair text-3xl text-yellow-600"></i>
                </div>
                <h3 class="text-2xl font-bold text-gray-900 mb-4">Manage Tables</h3>
                <p class="text-gray-600 mb-6 leading-relaxed">Configure restaurant tables and seating capacity.</p>
                <button onclick="loadPanel('Tables')" class="bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-4 rounded-xl font-medium shadow-lg">
                    Manage Tables
                </button>
            </div>
        </div>
    </div>

    <!-- Container under the management buttons -->
    <div id="management-panel" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-12"></div>

    <!-- Quick Actions -->
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200">
        <div class="bg-gradient-to-r from-gray-800 to-gray-900 text-white p-6 rounded-t-2xl">
            <h2 class="text-2xl font-bold flex items-center">
                <i class="fas fa-bolt mr-3"></i>Quick Actions
            </h2>
        </div>
        <div class="p-8">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <!-- Booking Quick Action -->
                <div class="relative">
                    <button onclick="toggleQuickForm(this, 'CreateBooking')"
                            class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-6 py-4 rounded-xl font-medium transition-all duration-200 transform hover:scale-105 shadow-lg w-full">
                        <i class="fas fa-plus mr-2"></i> Create New Booking
                    </button>
                    <div class="quick-form-container mt-2 hidden"></div>
                </div>

                <!-- Menu Item Quick Action -->
                <div class="relative">
                    <button onclick="toggleQuickForm(this, 'CreateMenuItem')"
                            class="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-6 py-4 rounded-xl font-medium transition-all duration-200 transform hover:scale-105 shadow-lg w-full">
                        <i class="fas fa-plus mr-2"></i> Add Menu Item
                    </button>
                    <div class="quick-form-container mt-2 hidden"></div>
                </div>

                <!-- Table Quick Action -->
                <div class="relative">
                    <button onclick="toggleQuickForm(this, 'CreateTable')"
                            class="bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-white px-6 py-4 rounded-xl font-medium transition-all duration-200 transform hover:scale-105 shadow-lg w-full">
                        <i class="fas fa-plus mr-2"></i> Add Table
                    </button>
                    <div class="quick-form-container mt-2 hidden"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
}

@section Scripts {
    <script>
        // ------------------------------
        // Notification system
        // ------------------------------
        function showNotification(message, type = 'success') {
            const container = document.getElementById('notification-container');

            const notification = document.createElement('div');
            notification.className = `
                flex items-center p-4 rounded-md shadow-md min-w-[250px]
                text-white ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}
                animate-slide-in
            `;

            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
                <span>${message}</span>
                <button class="ml-auto hover:text-gray-200" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;

            container.appendChild(notification);

            // Auto-remove after 5 seconds
            setTimeout(() => notification.remove(), 15000);
        }


        // ------------------------------
        // Load management panels
        // ------------------------------
        async function loadPanel(type) {
            const container = document.getElementById("management-panel");

            // Find the button that was clicked
            const btn = document.querySelector(`button[onclick="loadPanel('${type}')"]`);

            // Toggle: if already loaded and visible, hide it
            const currentType = container.dataset.panelType;
            if (currentType === type && container.innerHTML.trim() !== '') {
                container.innerHTML = '';
                container.removeAttribute('data-panel-type');
                btn.textContent = `Manage ${type}`; // restore original text
                return;
            }

            // Close any other open panel first
            const otherPanel = document.getElementById("management-panel");
            if (otherPanel.dataset.panelType && otherPanel.dataset.panelType !== type) {
                const otherType = otherPanel.dataset.panelType;
                const otherBtn = document.querySelector(`button[onclick="loadPanel('${otherType}')"]`);
                otherPanel.innerHTML = '';
                otherPanel.removeAttribute('data-panel-type');
                if (otherBtn) otherBtn.textContent = `Manage ${otherType}`;
            }

            // Set the current panel type
            container.dataset.panelType = type;
            container.innerHTML = `
                <div class="text-center p-8">
                    <i class="fas fa-spinner fa-spin text-4xl text-gray-400"></i>
                    <p class="text-gray-500 mt-4">Loading...</p>
                </div>
            `;
            btn.textContent = `Close ${type}`; // change text

            try {
                const response = await fetch(`/AdminPanel/Get${type}Panel`);
                const html = await response.text();
                container.innerHTML = html;
                initializePanelForms(container);
            } catch (err) {
                container.innerHTML = '<p class="text-red-500 p-4">Failed to load panel</p>';
                showNotification('Failed to load panel', 'error');
                btn.textContent = `Manage ${type}`; // restore text on error
            }
        }

        // ------------------------------
        // Initialize forms in loaded panel
        // ------------------------------
        function initializePanelForms(container) {
            const forms = container.querySelectorAll('form');
            forms.forEach(form => {
                if (form.dataset.initialized) return;
                form.dataset.initialized = 'true';

                form.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    await handleFormSubmit(form);
                });
            });
        }

        // ------------------------------
        // Toggle quick forms
        // ------------------------------
        async function toggleQuickForm(btn, type) {
            const container = btn.nextElementSibling;
            const isVisible = !container.classList.contains('hidden');

            // Hide all other quick forms first
            document.querySelectorAll('.quick-form-container').forEach(c => {
                if (c !== container) {
                    c.innerHTML = '';
                    c.classList.add('hidden');
                    const otherBtn = c.previousElementSibling;
                    if (otherBtn) {
                        // Restore button text (remove "Close")
                        otherBtn.textContent = otherBtn.dataset.originalText || otherBtn.textContent;
                        otherBtn.disabled = false;
                    }
                }
            });

            if (isVisible) {
                container.innerHTML = '';
                container.classList.add('hidden');
                btn.textContent = btn.dataset.originalText || btn.textContent; // restore original text
                btn.disabled = false;
                return;
            }

            // Save original text on first open
            if (!btn.dataset.originalText) btn.dataset.originalText = btn.textContent;

            container.innerHTML = '<p class="text-gray-500 p-4">Loading form...</p>';
            container.classList.remove('hidden');

            try {
                const response = await fetch(`/AdminPanel/Get${type}Panel`);
                const html = await response.text();
                container.innerHTML = html;

                if (type === 'CreateBooking') {
                    initializeBookingForm(container);
                }

                initializeQuickForm(container, type);

                // Change button text to "Close …"
                btn.textContent = `Close ${btn.dataset.originalText.replace(/^Add\s*/, '')}`;
                btn.disabled = false;
            } catch (err) {
                container.innerHTML = '<p class="text-red-500 p-4">Failed to load form</p>';
                showNotification('Failed to load form', 'error');
                btn.textContent = btn.dataset.originalText; // restore text on error
                btn.disabled = false;
            }
        }

        function initializeQuickForm(container, type) {
            const form = container.querySelector('form');
            if (!form) return;

            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                if (type === 'CreateBooking') {
                    await handleBookingFormSubmit(form, () => {
                        container.innerHTML = '';
                        container.classList.add('hidden');
                        container.previousElementSibling.disabled = false;
                    });
                } else {
                    await handleRegularFormSubmit(form, () => {
                        container.innerHTML = '';
                        container.classList.add('hidden');
                        container.previousElementSibling.disabled = false;
                    });
                }
            });
        }

        // ------------------------------
        // Form submission handlers
        // ------------------------------
        async function handleBookingFormSubmit(form, onSuccess) {
            // Clear any previous error displays
            const errorContainer = form.querySelector('#form-errors');
            if (errorContainer) {
                errorContainer.classList.add('hidden');
                errorContainer.querySelector('ul').innerHTML = '';
            }

            // Validate required fields before submission
            const valOrEmpty = (sel) => form.querySelector(sel)?.value || "";

            const startTime = valOrEmpty('#hiddenBookingDateTime');
            const tableId = valOrEmpty('#tableSelect');
            const numberOfGuests = valOrEmpty('#NumberOfGuests');
            const name = valOrEmpty('#Name').trim();
            const phoneNumber = valOrEmpty('#PhoneNumber').trim();

            console.log(startTime);
            console.log(tableId);
            console.log(numberOfGuests);
            console.log(name);
            console.log(phoneNumber);

            const errors = [];
            if (!name) errors.push('Customer name is required');
            if (!phoneNumber) errors.push('Phone number is required');
            if (!tableId) errors.push('Please select a table');
            if (!numberOfGuests || numberOfGuests < 1) errors.push('Number of guests must be at least 1');
            if (!startTime) errors.push('Please select a time slot');

            if (errors.length > 0) {
                displayFormErrors(form, errors);
                return;
            }

            // Create FormData and ensure all fields are included
            const formData = new FormData();
            formData.append('Name', name);
            formData.append('PhoneNumber', phoneNumber);
            formData.append('TableId', tableId);
            formData.append('NumberOfGuests', numberOfGuests);
            formData.append('StartTime', startTime);

            // Add anti-forgery token
            const token = form.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                formData.append('__RequestVerificationToken', token.value);
            }

            try {
                const response = await fetch('/AdminPanel/CreateBooking', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    // Check if response is JSON (AJAX) or HTML (redirect)
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        const result = await response.json();
                        showNotification(result.message || 'Booking created successfully!', 'success');
                    } else {
                        showNotification('Booking created successfully!', 'success');
                    }

                    if (onSuccess) onSuccess();

                    // Reload any open panels that might need refreshing
                    const managementPanel = document.getElementById('management-panel');
                    if (managementPanel.innerHTML.trim() !== '') {
                        // Refresh the current panel if one is loaded
                        const panelContent = managementPanel.querySelector('[data-panel-type]');
                        if (panelContent) {
                            const panelType = panelContent.dataset.panelType;
                            loadPanel(panelType);
                        }
                    }
                } else {
                    // Handle error response
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        const errorData = await response.json();
                        displayFormErrors(form, errorData.errors || ['Failed to create booking']);
                    } else {
                        const errorText = await response.text();
                        console.error('Booking creation failed:', errorText);
                        displayFormErrors(form, ['Failed to create booking. Please try again.']);
                    }
                }
            } catch (err) {
                console.error('Form submission error:', err);
                displayFormErrors(form, ['Network error. Please check your connection and try again.']);
            }
        }

        async function handleRegularFormSubmit(form, onSuccess) {
            const formData = new FormData(form);
            const actionUrl = form.getAttribute('action');

            try {
                const response = await fetch(actionUrl, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    showNotification('Operation completed successfully!', 'success');
                    if (onSuccess) onSuccess();
                } else {
                    const errorText = await response.text();
                    console.error('Form submission failed:', errorText);
                    showNotification('Operation failed', 'error');
                }
            } catch (err) {
                console.error('Form submission error:', err);
                showNotification('Failed to submit form', 'error');
            }
        }

        // Legacy handler for backward compatibility
        async function handleFormSubmit(form, onSuccess) {
            return await handleRegularFormSubmit(form, onSuccess);
        }

        function displayFormErrors(form, errors) {
            const errorContainer = form.querySelector('#form-errors');
            if (errorContainer && errors.length > 0) {
                const errorList = errorContainer.querySelector('ul');
                errorList.innerHTML = errors.map(error => `<li>${error}</li>`).join('');
                errorContainer.classList.remove('hidden');

                // Scroll error container into view
                errorContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        // ------------------------------
        // Booking form (table + date + slots) - 24H FORMAT
        // ------------------------------
        function initializeBookingForm(container) {
            const dateInput = container.querySelector('#bookingDate');
            const tableSelect = container.querySelector('#tableSelect');

            if (!dateInput || !tableSelect) {
                console.error('Required booking form elements not found');
                return;
            }

            // Set date constraints
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);

            // Set minimum date to today, default to tomorrow for better UX
            dateInput.min = today.toISOString().split('T')[0];
            dateInput.value = tomorrow.toISOString().split('T')[0];

            // Set maximum date (optional - 90 days from now)
            const maxDate = new Date(today);
            maxDate.setDate(maxDate.getDate() + 90);
            dateInput.max = maxDate.toISOString().split('T')[0];

            // Event listeners with debouncing for better performance
            let debounceTimeout;
            const debouncedLoadSlots = () => {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(loadAvailableSlots, 300);
            };

            dateInput.addEventListener('change', debouncedLoadSlots);
            tableSelect.addEventListener('change', debouncedLoadSlots);

            // Load initial slots if table is pre-selected
            if (tableSelect.value && dateInput.value) {
                setTimeout(loadAvailableSlots, 100);
            }
        }

        async function loadAvailableSlots() {
            const tableSelect = document.querySelector('#tableSelect');
            const dateInput = document.querySelector('#bookingDate');
            const slotContainer = document.querySelector('#timeSlotContainer');
            const hiddenInput = document.querySelector('#hiddenBookingDateTime');

            if (!tableSelect || !dateInput || !slotContainer || !hiddenInput) {
                console.error('Required form elements not found');
                return;
            }

            const tableId = tableSelect.value;
            const date = dateInput.value;

            if (!tableId || !date) {
                slotContainer.innerHTML = '<p class="text-gray-500">Please select a table and date first.</p>';
                hiddenInput.value = '';
                return;
            }

            slotContainer.innerHTML = '<p class="text-gray-500">Loading available slots...</p>';

            try {
                const response = await fetch(`/AdminPanel/GetAvailableSlots?tableId=${tableId}&date=${date}`);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const slots = await response.json();
                console.log(slots);

                if (!slots || slots.length === 0) {
                    slotContainer.innerHTML = '<p class="text-gray-500">No available slots for the selected date and table.</p>';
                    hiddenInput.value = '';
                    return;
                }

                // Create time slot HTML with 24-hour format
                const slotHTML = slots.map(slot => {
                    const isAvailable = slot.available;
                    const timeDisplay = slot.time; // Use 24-hour format directly

                    return `
                        <div class="time-slot px-3 py-2 rounded-lg text-center cursor-pointer border transition-all duration-200 ${
                            isAvailable
                                ? 'bg-green-100 hover:bg-green-200 border-green-300 hover:shadow-md'
                                : 'bg-gray-200 border-gray-300 text-gray-500 line-through cursor-not-allowed opacity-60'
                        }"
                        data-time="${slot.time}"
                        data-available="${isAvailable}"
                        ${!isAvailable ? 'title="This time slot is already booked"' : ''}>
                            <span class="font-medium">${timeDisplay}</span>
                            ${!isAvailable ? '<br><small class="text-xs">Booked</small>' : ''}
                        </div>
                    `;
                }).join('');

                slotContainer.innerHTML = `
                    <label class="block text-gray-700 font-medium mb-2">
                        Select Time Slot *
                        <small class="text-gray-500 font-normal">(Available slots in green)</small>
                    </label>
                    <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-2 mb-2">
                        ${slotHTML}
                    </div>
                    <p class="text-sm text-gray-600 mt-2">
                        <i class="fas fa-info-circle mr-1"></i>
                        Click on a green time slot to select it
                    </p>
                `;

                // Add click event listeners to available slots
                slotContainer.querySelectorAll('.time-slot[data-available="true"]').forEach(slot => {
                    slot.addEventListener('click', function() {
                        // Remove selection from all slots
                        slotContainer.querySelectorAll('.time-slot').forEach(s => {
                            s.classList.remove('bg-blue-500', 'text-white', 'border-blue-600', 'shadow-lg');
                            if (s.dataset.available === 'true') {
                                s.classList.add('bg-green-100', 'border-green-300');
                            }
                        });

                        // Apply selection to clicked slot
                        this.classList.remove('bg-green-100', 'border-green-300');
                        this.classList.add('bg-blue-500', 'text-white', 'border-blue-600', 'shadow-lg');

                        // Update hidden input with full datetime
                        const selectedDateTime = `${date}T${this.dataset.time}:00`;
                        hiddenInput.value = selectedDateTime;

                        console.log('Selected datetime:', selectedDateTime);
                    });
                });

                // Auto-select first available slot if none selected
                const firstAvailable = slotContainer.querySelector('.time-slot[data-available="true"]');
                if (firstAvailable && !hiddenInput.value) {
                    firstAvailable.click();
                }

            } catch (error) {
                console.error('Error loading time slots:', error);
                slotContainer.innerHTML = `
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                        <p class="text-red-600">
                            <i class="fas fa-exclamation-triangle mr-2"></i>
                            Failed to load available time slots. Please try again.
                        </p>
                        <button onclick="loadAvailableSlots()" class="text-sm text-red-700 underline mt-2">
                            Retry
                        </button>
                    </div>
                `;
                hiddenInput.value = '';
            }
        }

        // Close quick form function
        function closeQuickForm(button) {
            const container = button.closest('.quick-form-container');
            const triggerButton = container.previousElementSibling;
            container.classList.add('hidden');
            container.innerHTML = '';
            triggerButton.disabled = false;
        }

        // ------------------------------
        // Initialize notifications from TempData
        // ------------------------------
        document.addEventListener('DOMContentLoaded', () => {
            const tempSuccess = '@TempData["Success"]';
            const tempError = '@TempData["Error"]';
            if (tempSuccess && tempSuccess !== '') showNotification(tempSuccess, 'success');
            if (tempError && tempError !== '') showNotification(tempError, 'error');
        });
    </script>

    @{/* _BookingPanel.cshtml scipts */}
    <script>
                function editBooking(id) {
            const li = document.getElementById(`booking-${id}`);
            const booking = {
                CustomerName: li.dataset.customer,
                CustomerId: li.dataset.customerid,
                NumberOfGuests: li.dataset.guests,
                StartTime: li.dataset.start,
                TableId: li.dataset.table
            };

            li.innerHTML = `
                <span>${booking.CustomerName}</span>
                <input type="number" id="guests-${id}" value="${booking.NumberOfGuests}" min="1" class="border rounded px-2 py-1 mr-2" />
                <input type="datetime-local" id="start-${id}" value="${booking.StartTime}" class="border rounded px-2 py-1 mr-2" />
                <button onclick="saveBooking(${id})" class="text-green-600 hover:underline">Save</button>
                <button onclick="cancelEdit(${id}, '${booking.NumberOfGuests}', '${booking.StartTime}')" class="text-gray-500 hover:underline">Cancel</button>
            `;
        }

        async function saveBooking(id) {
            const li = document.getElementById(`booking-${id}`);
            const guests = parseInt(document.getElementById(`guests-${id}`).value);
            const startTime = document.getElementById(`start-${id}`).value;
            const tableId = li.dataset.table;
            const customerId = li.dataset.customerid;

            const res = await fetch(`/api/bookings/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    NumberOfGuests: guests,
                    StartTime: startTime,
                    TableId: tableId,
                    CustomerId: customerId
                })
            });

            if (res.ok) {
                // Update the li content directly
                li.dataset.guests = guests;
                li.dataset.start = startTime;

                li.innerHTML = `
                    <div class="booking-display flex-1">
                        <span>${li.dataset.customer} (${new Date(startTime).toLocaleString()})</span>
                        <span>Table: ${tableId}</span>
                        <span>Guests: ${guests}</span>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="editBooking(${id})" class="text-blue-600 hover:underline">Edit</button>
                        <button onclick="deleteBooking(${id})" class="text-red-600 hover:underline">Delete</button>
                    </div>
                `;
            } else {
                const data = await res.json();
                alert('Failed to update booking: ' + (data.message || 'Unknown error'));
            }
        }

        function cancelEdit(id, originalGuests, originalStart) {
            const li = document.getElementById(`booking-${id}`);
            li.innerHTML = `
                <div class="booking-display flex-1">
                    <span>${li.dataset.customer} (${new Date(originalStart).toLocaleString()})</span>
                    <span>Table: ${li.dataset.table}</span>
                    <span>Guests: ${originalGuests}</span>
                </div>
                <div class="flex space-x-2">
                    <button onclick="editBooking(${id})" class="text-blue-600 hover:underline">Edit</button>
                    <button onclick="deleteBooking(${id})" class="text-red-600 hover:underline">Delete</button>
                </div>
            `;
        }

        async function deleteBooking(id) {
            if (!confirm("Are you sure you want to delete this booking?")) return;

            const res = await fetch(`/api/bookings/${id}`, { method: 'DELETE' });
            if (res.ok) {
                document.getElementById(`booking-${id}`).remove();
            } else {
                const data = await res.json();
                alert('Failed to delete booking: ' + (data.message || 'Unknown error'));
            }
        }
    </script>

    @{
        /* _BookingPanel.cshtml scipts */
    }
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.querySelector('form[action="/AdminPanel/CreateMenuItem"]');
            if (!form) return;

            const errorsDiv = form.querySelector('#form-errors');
            const successDiv = form.querySelector('#form-success');

            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                errorsDiv.classList.add('hidden');
                successDiv.classList.add('hidden');

                const formData = new FormData(form);

                const res = await fetch(form.action, {
                    method: 'POST',
                    body: formData
                });

                if (res.ok) {
                    successDiv.querySelector('p').textContent = 'Menu item added successfully!';
                    successDiv.classList.remove('hidden');
                    form.reset();
                } else {
                    const data = await res.json();
                    const ul = errorsDiv.querySelector('ul');
                    ul.innerHTML = '';
                    data.errors?.forEach(err => {
                        const li = document.createElement('li');
                        li.textContent = err;
                        ul.appendChild(li);
                    });
                    errorsDiv.classList.remove('hidden');
                }
            });
        });
    </script>
}
